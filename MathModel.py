# -*- coding: utf-8 -*-
"""Assignment 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cT1V7QeyvhO45eSdV519Fb6tKrWoVDnS
"""

from numpy.ma.core import exp
from scipy.integrate import solve_ivp
import scipy.integrate
import numpy as np
import matplotlib.pyplot as plt
import math

m = 0.06385
I =0.00024800
d = 0.1
eps = 1e-3
v0 = 7
r = 0.01
R = 0.031
L = 0
t = 0
g = 9.8
falling = 1
drag = 0.00125
tf = []
pos = []
tt = np.linspace(t,t + 1.1,1000)

def eq(t,v):
  return [v[1],(m * r * g - r * drag * v[1]) / (I + r * r * m)]

res = solve_ivp(eq, (0,10),[0,0],t_eval = tt)

plt.plot(tt,res.y[0].T)
plt.show()
a = -r**2*m*g/(I + r**2 * m)
b = (R * drag / (I + r**2 * m))

print(a , " " , b)

tvals = []
yvals = []

def down(t,l0,tvals,yvals):
  tt = np.linspace(t,t + 10,1000)
  def eq1(t,v):
    return [v[1],-(r**2  * m * g   + R * v[1]  * drag) / (I + r**2 *m)]
  
  
  res = solve_ivp(eq1,(t,t+10),[l0,0],t_eval = tt)
  yy = res.y[0].T
  for i in range(0,len(tt) - 1):
    tvals += [tt[i]]
    yvals += [yy[i]]
    if yy[i] <= 0:
      return res.y[1].T[i] , tt[i]
  
  return -1


def up(t,v0,tvals,yvals):
  tt = np.linspace(t,t + 10,1000)
  def eq1(t,v):
    return [v[1],-g]
  def eq2(t,v):
    return [v[1],-(r**2  * m * g   + R * v[1]  * drag) / (I + r**2 *m)]
  
  def eq(t,v):
    return [v[1],( - m * r * g - r * drag * v[1]) / (I + r * r * m)]
  res = solve_ivp(eq2,(t,t+10),[0,v0],t_eval = tt)
  yy = res.y[1].T
  for i in range(0,len(yy)-1):
    tvals += [tt[i]]
    yvals += [res.y[0].T[i]]
    if yy[i] <=0:
      return res.y[0].T[i],tt[i]
  return -1


t = 0
v0 = 0
l = 0.63
for i in range(0,10):
  v0,t = down(t,l,tvals,yvals)
  print("Velocity: ",v0, t)
  l,t = up(t,-v0,tvals,yvals) 
  print("Length up: " , l,t)



plt.plot(tvals,yvals)